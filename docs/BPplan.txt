"Boilerplate" minimalistic game system
Dev plan:

Boilerplate:
SDL, FreeType, OpenGL 2.x
Camera movement
orientation triangle
primitive drawing
textures
simple menus
-------------
compatibility crusade begins
makefile
doxygen
[versioning]
[valgrind]
-------------
BP+:
model loading
terrain Gen
[microphysics (terrain height, bounding cyllinder, gravity)]
player controller
-------------
BP++:
ODE physics
simple NPCs

=========================
camera:
setPos()
setRot()
setFov()
setScale()
go2D()
go3D()
goPerspective()
goOrtho()
=========================
inputController():

mouseLook / RTSLook / nocapture


=========================
primitive drawing:

currentRenderOptions
pushRenderOptions()
popRenderOptions()

setColor()
setThickness()
setFont()
setFontSize()
setScissor()
setTextMaxX()
setTextMaxY()
setTextPos()
setInfiniteDraw() - line instead of segment, plane instead of triangle

preprintw() - reports resulting size
printw() - prints text on 2d screen

clearScreen()
drawPoint2D()
drawLine2D()
drawRect()
drawRectOutline()

drawPoint3D()
drawLine3D()
drawTriangle3D()

=========================
simple menus:

GUI:
render()
think()
messageReceive()

base:
color1
color2
pos
size
*render()
*think()
*messageReceive()

frame:

button:
func

label:
text
===========================


program links against:
	SDL - for platform independency
	OpenGL - for display
	Bullet - for physics
And to lesser extent:
	FreeType - for font generation

Program is broken into modules. Each library that the program links to is referenced by exactly one module.
A module has interface and implementation. Interface
is seen by the entire program, and depends on nothing.
Implementation is seen by nothing, and depends on the library. Each module contains several systems. Every object
in the program is owned by exactly one system, and 
that system is responsible for creating and destroying
the object. Systems are also broken into implementation and interface.

Modules reduce the amount of code that needs to be changed
when a library needs to be replaced, and systems localize bugs to themselves or at least their module.

The central module is "pure" and does not reference anything from outside world, only referencing other modules through their interfaces.