"Boilerplate" minimalistic game system
Dev plan:

Boilerplate:
SDL, FreeType, OpenGL 2.x
Camera movement
orientation triangle
primitive drawing
textures
simple menus
-------------
compatibility crusade begins
makefile
doxygen
[versioning]
[valgrind]
-------------
BP+:
model loading
terrain Gen
[microphysics (terrain height, bounding cyllinder, gravity)]
player controller
-------------
BP++:
ODE physics
simple NPCs

=========================
camera:
setPos()
setRot()
setFov()
setScale()
go2D()
go3D()
goPerspective()
goOrtho()
=========================
inputController():

mouseLook / RTSLook / nocapture


=========================
primitive drawing:

currentRenderOptions
pushRenderOptions()
popRenderOptions()

setColor()
setThickness()
setFont()
setFontSize()
setScissor()
setTextMaxX()
setTextMaxY()
setTextPos()
setInfiniteDraw() - line instead of segment, plane instead of triangle

preprintw() - reports resulting size
printw() - prints text on 2d screen

clearScreen()
drawPoint2D()
drawLine2D()
drawRect()
drawRectOutline()

drawPoint3D()
drawLine3D()
drawTriangle3D()

=========================
simple menus:

GUI:
render()
think()
messageReceive()

base:
color1
color2
pos
size
*render()
*think()
*messageReceive()

frame:

button:
func

label:
text
===========================
needed math things:
vector: 
 vec2i vec2f vec3i vec3f
space: (allows "inside/outside" testing
 rect: (axis-aligned space made of 2 positions)
 rect2i rect2f
 rect3i rect3f
transform: (allows "tolocal/toworld" transform)
angle: (allows rotation, only for 3d (2d version is just float)
 euler (gimbal lock)
 axisangle (can't combine)
 quaternion (limited to 1 rotation)
 matrix (wat)
projection
 matrix

angle.toEuler
angle.fromEuler
angle.toAxisAngle
angle.fromAxisAngle
angle.toQuat		// converts to quat, loses >2pi angle
angle.toMatrix
angle.fromMatrix
angle.mix		// creates in-between orientation
angle.add		// adds a simultaneous rotation
angle.mul		// scales the components of rotation
angle.norm		// keeps the axis but normalizes the angle

transform.get/setPos
transform.get/setRot

vector.x,y,z
vector.norm
vector.length
vector.lengthsquared
vector.dot
vector.cross
vector.rotate
vector.add
vector.mul

projection.perspective
projection.ortho
projection.project
projection.unproject

space.get/setTransform
space.set/getStart
space.set/getEnd
space.set/getSize
space.moveTo
space.moveBy
space.contains


===========================
when big code comes:
add GLM OR make a cool math library
do all rotations using angle-axis or quats
do the renderqueue thing
---------------------------
comparison
Old Code:					New Code:

 systems:________________________________________systems:
  paint			+ tempPaintSettings	  paint		+ renderOptions
  GUI 2,4,5					  GUI
  keybinds	
  input						  inputController	
  console		
  scene						  renderqueue
  physics					
						  bulletPhysics
						  physCharacter
 generator:______________________________________generator:
  sphere,cone,cyllinder,cube
  						  terrain (heightmap)
						  atlas
 math:___________________________________________math:
  vec			+ ray-tri intersection    vec
  rect						  rect
  quat
  convex hull	
  color						  
						  bitmap
						  fancymath (2Dpacker)

 resources:______________________________________resources:
  cursor					  
  fonts			+ rich printing		  fonts
  model			(id, val)		  model
  texture		(raw, bmp, png)	 	  texture
						  atlas
						
 utilities:______________________________________utilities:
  debug			+ context filter	  debug 	+ profiler
  message					  event
  hook
  strings		+ formatted string
						  selfaware
 design:
  version number
  trail
 experimental:
  view frustum
  orientation helper
  quat test
  floating text
  convex hull
  except/assert/error

fun stuff I want NOW:
walk around on land
craft vacuum tubes
sail the seas

other stuff I need:
profiling
render auto-batching
make it stop lagging
also maybe a debug filter
scripted rendering
scripted GUI
maybe a graphical stuff generator

todo:
underp camera transforms
make a "geometry" math file for intersections and ideal shapes.
remove vec3f and have everything use glm::vec. Add rect2,rect3. ponder removing integer-valued types (colors may still need them).
video capture! by saving render command buffer + abs. time on each frame.

